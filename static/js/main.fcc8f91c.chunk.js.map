{"version":3,"sources":["assets/picture-profile.jpg","components/HomeOptions.js","Home.js","components/ProfileNav.js","components/ProfileFooter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeOptions","Accordion","defaultActiveKey","className","Card","border","Toggle","as","Header","eventKey","Collapse","Body","Home","Container","Row","Col","md","Image","src","picture","roundedCircle","ProfileNav","Navbar","bg","variant","expand","Nav","Link","href","Styled","styled","div","ProfileFooter","Provider","value","size","target","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fcc8f91c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/picture-profile.b6f4362f.jpg\";","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst whoami = \" Meu nome é Caio. Sou estudante na Universidade\" +\r\n  \" de São Paulo no curso Bacharelado em Sistemas de Informação e sou formado\" +\r\n  \" pela ETEC Bento Quirino como Técnico em Eletrônica.\"\r\n\r\nconst interests = \"Atualmente, estou aprendendo desenvolvimento web, \" +\r\n  \"desktop e IoT. Gosto muito de pensar os layouts para os produtos e soluções\" +\r\n  \" que automatizam as nossas tarefas.\"\r\n\r\nconst languages = \"Português nativo, Inglês nível Avançado\" +\r\n  \" e Francês nível Iniciante.\"\r\n\r\n\r\nexport const HomeOptions = () => (\r\n  <Accordion defaultActiveKey = \"0\" className = \"arc-pos-config\">\r\n    <Card border = \"light\">\r\n      <Accordion.Toggle as = {Card.Header} eventKey= \"0\" className = \"acc-title-config\">\r\n        Quem sou\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey = \"0\">\r\n        <Card.Body className = \"desc-text-config\">{whoami}</Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n    <Card border = \"light\">\r\n      <Accordion.Toggle as = {Card.Header} eventKey = \"1\" className = \"acc-title-config\">\r\n        Interesses\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey = \"1\">\r\n        <Card.Body className = \"desc-text-config\">{interests}</Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n    <Card border = \"light\">\r\n      <Accordion.Toggle as = {Card.Header} eventKey = \"2\" className = \"acc-title-config\">\r\n        Línguas\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey = \"2\">\r\n        <Card.Body className = \"desc-text-config\">{languages}</Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  </Accordion>\r\n)\r\n","import React from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Image from 'react-bootstrap/Image'\r\nimport picture from './assets/picture-profile.jpg'\r\nimport {HomeOptions} from './components/HomeOptions.js'\r\n\r\n\r\nexport const Home = () => (\r\n  <Container >\r\n    <Container>\r\n      <Row>\r\n        <Col md>\r\n          <HomeOptions />\r\n        </Col>\r\n        <Col md className = \"pic-align-config\">\r\n          <Image className = \"profile-pic-config\" src = {picture} roundedCircle />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </Container>\r\n)\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nconst homePage = '/caio-perfil/#/'\r\n\r\nexport const ProfileNav = () => (\r\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\" className = \"navbar-config\" >\r\n    <Navbar.Toggle />\r\n    <Navbar.Collapse className = \"justify-content-end\" >\r\n      <Nav defaultActiveKey = {homePage} className = \"justify-content-end\" >\r\n        <Nav.Link href = {homePage} className = \"icons-config\" > Perfil </Nav.Link>\r\n        <Nav.Link href = \"#projetos\" className = \"icons-config\" > Projetos </Nav.Link>\r\n        <Nav.Link href = \"#artigos\" className = \"icons-config\" > Artigos </Nav.Link>\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n)\r\n","import React from 'react'\r\nimport {Container, Col, Row} from 'react-bootstrap'\r\nimport {FaLinkedin} from 'react-icons/fa'\r\nimport {FaTwitter} from 'react-icons/fa'\r\nimport {FaInstagram} from 'react-icons/fa'\r\nimport {FaGithub} from 'react-icons/fa'\r\nimport {IconContext} from 'react-icons'\r\nimport {FaWhatsapp} from 'react-icons/fa'\r\nimport styled from 'styled-components'\r\n\r\nconst Styled = styled.div`\r\n\r\n.foot-icon-align{\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n`;\r\n\r\nexport const ProfileFooter = () => (\r\n  <Styled>\r\n  <div className = \"prof-footer-config\">\r\n    <Container>\r\n      <Row>\r\n        <Col md>\r\n        </Col>\r\n        <Col md className = \"foot-icon-align\">\r\n        <IconContext.Provider value={{ size: \"2em\", className: \"global-class-name\" }}>\r\n          <div>\r\n            <a href = \"https://www.linkedin.com/in/caioohman/\" target = \"_blank\">\r\n              <FaLinkedin/>\r\n            </a>\r\n            <a href = \"https://twitter.com/caioohman\" target = \"_blank\">\r\n              <FaTwitter/>\r\n            </a>\r\n            <a href = \"https://www.instagram.com/caioohman/\" target = \"_blank\">\r\n              <FaInstagram/>\r\n            </a>\r\n            <a href = \"https://github.com/caiohman\" target = \"_blank\">\r\n              <FaGithub/>\r\n            </a>\r\n            <a href = \"https://wa.me/5519989032927\" target = \"_blank\">\r\n              <FaWhatsapp/>\r\n            </a>\r\n          </div>\r\n          </IconContext.Provider>\r\n        </Col>\r\n        <Col md>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </div>\r\n  </Styled>\r\n)\r\n","import React from 'react'\nimport './App.scss'\nimport './components/animation/hover.scss'\nimport {HashRouter as Router , Route , Switch} from 'react-router-dom'\nimport {Home} from './Home.js'\nimport {ProfileNav} from './components/ProfileNav.js'\nimport {ProfileFooter} from './components/ProfileFooter.js'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <div>\n          <ProfileNav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n          </Switch>\n          <ProfileFooter />\n        </div>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}